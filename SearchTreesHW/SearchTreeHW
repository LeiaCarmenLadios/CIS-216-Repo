R-11.1

        (1, A)
        /    \
     (2, B) (3, C)
             /  \
         (4, D) (5, E)
         
R-11.2

	      30 
	     /   \
	   24     40
	  /  \		\
	11    26	 58
	  \ 		 /
	   13		48
	   
R-11.3

About 9 different binary search trees 
can hold {1, 2, 3}. How that looks like depends
on what is added first. If they are added in the
order 1, 2, then 3, it will look like

    1
     \
      2
       \
        3

If the order was 3, 1, then 2, it would be:
     3
    / 
   1   
    \
     2
 
 
 R-11.4
 He is absolutely wrong. As I showed in R-11.3, 
 the order in which the keys are inserted matters 
 and does not result in the same tree. Given a 
 set of keys {11, 22, 34, 52}, we can add them in
 different orders and see that the resulting tree is not 
 the same every time. 
 
 Say we do 22, 34, 11, 52, then we would get: 
 
           22
          /  \
         11   34
                \
           		52
Then, say we do 52, 32, 11, 22, we would get. 
            52
            /
           32
           /
          11
            \
            22
            
Finally, let's do 32, 22, 52, 11.
           32
          /  \
         22   52
         /
        11    
As you can see, these trees are not the same. 


R-11.5

The difference between binary search trees and AVL trees
is that AVL trees allows us to maintain a logarithmic height
and allows us to avoid having operations that take linear 
running time to accomplish. This only matters if there is an
imbalance to the tree. We take care of this in the insertion
of an entry by checking if the addition would result in an 
unbalanced tree in which case we would have to restructure. 

But given the key insertions 45, 17, 6, 56, 39 we get:
					45
				   /  \
				  17   56
				 /	\   
				6   39

The insertion is different than that of a binary search tree
insertion in that it does a trinode restructure if the 
height difference between a node and its children is a
maximum of 1. 

Say we have 45, 17, 6, 56, 39, and 12. We would get a tree like:

					45
				   /  \
				  17   56
				 /	\   
				6   39
				 \  
				 
				  12

This is a different tree than if we inserted it in the order
of 45, 17, 12, 56, 39, 6. We would instead get:

				
					45
				   /  \
				  17   56
				 /	\   
			    12   39
				/
			   6
			  
The restructuring would still have to happen for both trees,
but clearly the order in which the keys are inserted does matter.
				 
C-11.37:
 
We could modify the search tree by allowing nodes in the 
search tree to switch if needed. For example, let's say 
we have the inserted keys:
					45
				   /  \
				  17   56
				 /	\   
			    12   39
				/
			   6

If swapping was supported, the tree could look like this: 
					45
				   /  \
				  39   56
				 /	\   
			    12   17
				/
			   6
					
Counting the range from 17 to 56 would be fairly straight forward.

C-11.39

Given the AVL tree 

			10
		   /  \
		  7    15
	   	 / \     \
	    5   8    12
	   / \   \
	  4   6   9
  
A single removal would cause a trinode
reconstruction if we removed the key of 12. 
It would become an unbalanced tree as there is a greater
than one difference in the heights of node's children.

The reconstructed tree will look like:
			 8
		   /   \
		  7     10
	   	 /     /  \
	    5     9    15
	   / \
	  4   6
  
		